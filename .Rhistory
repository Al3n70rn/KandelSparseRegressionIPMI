}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=0.8, basefval = 10)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2, alphafunc=0.8))
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=c(0.7, 1, 1.5), alphafunc=c(0.3, 0.6, 1))
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.3, alphafunc=c(0.3, 0.6, 1))
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=3, alphafunc=1)
lateralLeft <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalLeft <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
lateralRight <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalRight <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
glass <- antsImageRead('data/template/glassbrain.nii.gz', 3)
wm <- antsImageRead('data/template/WM.nii.gz', 3)
leftright <- antsImageRead('data/template/leftright.nii.gz', 3)
eigenvectors.left <- list()
eigenvectors.right <- list()
for (i in length(regress.age$eigenanatomyimages):1){
eigenvectors.left[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 1)
eigenvectors.right[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 2)
if(length(eigenvectors.left[[i]][eigenvectors.left[[i]] > 0]) == 0){
eigenvectors.left[[i]] <- NULL # delete eigenvectors with only zeros
}
if(length(eigenvectors.right[[i]][eigenvectors.right[[i]] > 0]) == 0){
eigenvectors.right[[i]] <- NULL
}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
lateralLeft <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalLeft <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
lateralRight <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalRight <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
glass <- antsImageRead('data/template/glassbrain.nii.gz', 3)
wm <- antsImageRead('data/template/WM.nii.gz', 3)
leftright <- antsImageRead('data/template/leftright.nii.gz', 3)
eigenvectors.left <- list()
eigenvectors.right <- list()
for (i in length(regress.age$eigenanatomyimages):1){
eigenvectors.left[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 1)
eigenvectors.right[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 2)
if(length(eigenvectors.left[[i]][eigenvectors.left[[i]] > 0]) == 0){
eigenvectors.left[[i]] <- NULL # delete eigenvectors with only zeros
}
if(length(eigenvectors.right[[i]][eigenvectors.right[[i]] > 0]) == 0){
eigenvectors.right[[i]] <- NULL
}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_left.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
require("xtable")
age.prediction
age.prediction <- regressProjections(img.age.train, img.age.test, demog.age.train,
demog.age.test, regress.age$eigenanatomyimages, mask, 'age',
covariates=c("edu"))
pdf('fig/AgePredictionOurMethod.pdf')
plot(age.prediction$outcome.comparison$real,
age.prediction$outcome.comparison$predicted,
xlab = 'Real age', ylab = 'Predicted age',
main='Predicted vs. Real Age Using Our Method')
dev.off()
age.prediction
age.prediction$stats
?options
options(digits=2)
digits
?digits
require(glmnet)
require
packageStartupMessage
message
suppressMessages(require(ANTsR))
getPckg <- function(pckg){
install.packages(pckg, repos = "http://cran.r-project.org")
}
pckg = try(require(xtable))
if(!pckg) {
cat("Installing 'xtable' from CRAN.\n")
getPckg("xtable")
require("xtable")
}
pckg <- try(require(glmnet))
if(!pckg){
cat("Installing 'glmnet' from CRAN.\n")
getPckg("glmnet")
require("glmnet")
}
options(digits=2) # for setting knitr outputs
fit.age.glm.cv <- cv.glmnet(input.age.train, demog.age.train$age, alpha=0.5)
fit.age.glm <- glmnet(input.age.train, demog.age.train$age, alpha=0.5)
betas.glm.age <- as.matrix(coef(fit, s=cv_fit$lambda.min))
fit.age.glm.cv <- cv.glmnet(input.age.train, demog.age.train$age, alpha=0.5)
fit.age.glm <- glmnet(input.age.train, demog.age.train$age, alpha=0.5)
betas.glm.age <- as.matrix(coef(fit.age.glm, s=fit.age.glm.cv$lambda.min))
require(glmnet)
fit.age.glm.cv <- cv.glmnet(input.age.train, demog.age.train$age, alpha=0.5)
fit.age.glm <- glmnet(input.age.train, demog.age.train$age, alpha=0.5)
betas.glm.age <- as.matrix(coef(fit.age.glm, s=fit.age.glm.cv$lambda.min))
img.age.train <- as.matrix(antsImageRead('data/image_data/age_train.mha', 2))
img.age.test <- as.matrix(antsImageRead('data/image_data/age_test.mha', 2))
demog.age.train <- read.csv('data/demog/train_demog_age.csv')
demog.age.train$age <- as.double(demog.age.train$age) # convert from int
demog.age.test <- read.csv('data/demog/test_demog_age.csv')
demog.age.test$age <- as.double(demog.age.test$age)
mask <- antsImageRead('data/template/GM_mask_lores_trimmed.nii.gz', 3)
fit.age.glm.cv <- cv.glmnet(input.age.train, demog.age.train$age, alpha=0.5)
fit.age.glm <- glmnet(input.age.train, demog.age.train$age, alpha=0.5)
betas.glm.age <- as.matrix(coef(fit.age.glm, s=fit.age.glm.cv$lambda.min))
fit.age.glm.cv <- cv.glmnet(img.age.train, demog.age.train$age, alpha=0.5)
fit.age.glm <- glmnet(img.age.train, demog.age.train$age, alpha=0.5)
betas.glm.age <- as.matrix(coef(fit.age.glm, s=fit.age.glm.cv$lambda.min))
cor.test(c(1,2), c(2,3))
cor.test(c(1,2,3), c(2,3,4))
cor.test(c(1,2,3), c(2,3,4))$corcoeff
cor.test(c(1,2,3), c(2,3,4))$cor
cor.test(c(1,2,3), c(2,3,4))$estimate
cor.test(c(1,2,3), c(2,3,4))$estimate$cor
cor.test(c(1,2,3), c(2,3,4))$estimate[[cor]]
cor.test(c(1,2,3), c(2,3,4))$estimate[1]
cor.test(c(1,2,3), c(2,3,4))$estimate[[1]
]
cor.test(c(1,2,3), c(2,3,4))$estimate[[1]]
lateralLeft <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalLeft <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
lateralRight <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalRight <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
glass <- antsImageRead('data/template/glassbrain.nii.gz', 3)
wm <- antsImageRead('data/template/WM.nii.gz', 3)
leftright <- antsImageRead('data/template/leftright.nii.gz', 3)
eigenvectors.left <- list()
eigenvectors.right <- list()
for (i in length(regress.age$eigenanatomyimages):1){
eigenvectors.left[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 1)
eigenvectors.right[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 2)
if(length(eigenvectors.left[[i]][eigenvectors.left[[i]] > 0]) == 0){
eigenvectors.left[[i]] <- NULL # delete eigenvectors with only zeros
}
if(length(eigenvectors.right[[i]][eigenvectors.right[[i]] > 0]) == 0){
eigenvectors.right[[i]] <- NULL
}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_left.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
# now visualization for elastic net
img.glm.age <- antsImageClone(mask)
img.glm.age[img.glm.age > 0 ] <- betas.glm.age
img.glm.age.left <- maskImage(img.glm.age, leftright, 1)
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1))
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_left.png')
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1))
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_right.png')
lateralLeft <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalLeft <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
lateralRight <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalRight <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
glass <- antsImageRead('data/template/glassbrain.nii.gz', 3)
wm <- antsImageRead('data/template/WM.nii.gz', 3)
leftright <- antsImageRead('data/template/leftright.nii.gz', 3)
eigenvectors.left <- list()
eigenvectors.right <- list()
for (i in length(regress.age$eigenanatomyimages):1){
eigenvectors.left[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 1)
eigenvectors.right[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 2)
if(length(eigenvectors.left[[i]][eigenvectors.left[[i]] > 0]) == 0){
eigenvectors.left[[i]] <- NULL # delete eigenvectors with only zeros
}
if(length(eigenvectors.right[[i]][eigenvectors.right[[i]] > 0]) == 0){
eigenvectors.right[[i]] <- NULL
}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_left.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
# now visualization for elastic net
img.glm.age <- antsImageClone(mask)
img.glm.age[img.glm.age > 0 ] <- betas.glm.age
img.glm.age.left <- maskImage(img.glm.age, leftright, 1)
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_left.png')
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_right.png')
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1)
betas.glm.age[1:6]
betas.glm.age[1:10]
mean[betas.glm.age]
mean(betas.glm.age)
mean(betas.glm.age[-1])
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.5)
betas.glm.age[1:1000]
betas.glm.age[1000:3000]
length[betas.glm.age[betas.glm.age>0]]
length([)betas.glm.age[betas.glm.age>0])
length(betas.glm.age[betas.glm.age>0])
median(betas.glm.age)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1)
mean(betas.glm.age[betas.glm.age>0])
median(betas.glm.age[betas.glm.age>0])
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1)
vals <- abs(betas.glm.age[betas.glm.age>0])
vals
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
img.glm.age.left, surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
?renderSurfaceFunction
require(ANTsR)
surfimg=list(wm.left, glass.left)
funcimg=list(img.glm.age.left)
surfval=0.5
alphasurf=c(1,2)
alphafunc=1
mycol<-rainbow(length(funcimg))
alphafunc <- rep(alphafunc, length.out=length(funcimg))
for (i in 1:length(surfimg)){
surf <- as.array(surfimg[[i]])
brain <- contour3d(surf, level=c(surfval[i]), alpha=alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
if (physical == TRUE ){
brain$v1 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v1)
brain$v2 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v2)
brain$v3 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v3)
}
mylist[[i]] <- brain
}
physical=T
alphafunc <- rep(alphafunc, length.out=length(funcimg))
for (i in 1:length(surfimg)){
surf <- as.array(surfimg[[i]])
brain <- contour3d(surf, level=c(surfval[i]), alpha=alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
if (physical == TRUE ){
brain$v1 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v1)
brain$v2 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v2)
brain$v3 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v3)
}
mylist[[i]] <- brain
}
mylist=list()
alphafunc <- rep(alphafunc, length.out=length(funcimg))
for (i in 1:length(surfimg)){
surf <- as.array(surfimg[[i]])
brain <- contour3d(surf, level=c(surfval[i]), alpha=alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
if (physical == TRUE ){
brain$v1 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v1)
brain$v2 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v2)
brain$v3 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v3)
}
mylist[[i]] <- brain
}
tracebacK()
traceback()
surfval
[1]
surfval[1]
brain <- contour3d(surf, level = c(surfval[i]), alpha = alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
brain<-contour3d(surf)
brain<-contour3d(surf, level=0.5)
alphasurf
i=1
brain <- contour3d(surf, level = c(surfval[i]), alpha = alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
for (i in 1:length(surfimg)){
surf<-as.array( surfimg[[i]] )
brain <- contour3d(surf, level = c(surfval[i]), alpha = alphasurf[i],
draw=FALSE, smooth=1, material="metal",
depth=0.6, color="white")
# each point has an ID, 3 points make a triangle , the points are laid out as
# c( x1 , y1, z1, x2, y2, z2 , ... , xn, yn, zn )
# indices are just numbers
#    vertices<-c(
#        brain <-  subdivision3d(brain)
if (physical == TRUE ){
brain$v1 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v1)
brain$v2 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v2)
brain$v3 <-  antsTransformIndexToPhysicalPoint(surfimg[[i]], brain$v3)
}
mylist[[i]] <- brain
}
i
length(funcimg)
i=1
1;1
1:1
func<-as.array( funcimg[[i]] )
vals<-abs( funcimg[[i]][ funcimg[[i]] > 0 ] )
vals
funcimg[[1]]
img.glm.age[img.glm.age>0][1:10]
img.glm.age[mask > 0 ] <- betas.glm.age
length(img.glm.age[mask>0])
length(betas.glm.age)
betas.glm.age<- betas.glm.age[-1]
img.glm.age[mask > 0 ] <- betas.glm.age
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
img.glm.age <- antsImageClone(mask)
img.glm.age[mask > 0 ] <- betas.glm.age
img.glm.age.left <- maskImage(img.glm.age, leftright, 1)
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
img.glm.age.right[mask>0][1:10]
img.glm.age.right[img.glm.age.right>0]
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.5)
img.glm.age <- antsImageClone(mask)
img.glm.age[mask > 0 ] <- betas.glm.age
img.glm.age.left <- maskImage(img.glm.age, leftright, 1)
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_left.png')
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
lateralLeft <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalLeft <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
lateralRight <- rotationMatrix(-pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
sagittalRight <- rotationMatrix(pi/2, 0, -1, 0) %*% rotationMatrix(pi/2, -1, 0, 0)
glass <- antsImageRead('data/template/glassbrain.nii.gz', 3)
wm <- antsImageRead('data/template/WM.nii.gz', 3)
leftright <- antsImageRead('data/template/leftright.nii.gz', 3)
eigenvectors.left <- list()
eigenvectors.right <- list()
for (i in length(regress.age$eigenanatomyimages):1){
eigenvectors.left[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 1)
eigenvectors.right[[i]] <- maskImage(regress.age$eigenanatomyimages[[i]],
leftright, 2)
if(length(eigenvectors.left[[i]][eigenvectors.left[[i]] > 0]) == 0){
eigenvectors.left[[i]] <- NULL # delete eigenvectors with only zeros
}
if(length(eigenvectors.right[[i]][eigenvectors.right[[i]] > 0]) == 0){
eigenvectors.right[[i]] <- NULL
}
}
wm.left <- maskImage(wm, leftright, 1)
wm.right <- maskImage(wm, leftright, 2)
glass.left <- maskImage(glass, leftright, 1)
glass.right <- maskImage(glass, leftright, 2)
age.vis.left <- renderSurfaceFunction( list( wm.left, glass.left ),
eigenvectors.left, surfval=0.5, alphasurf=c(1, 0.2),
basefval = 1.5, alphafunc=1)
# you may need to customize visualization parameters for your display
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_left.png')
age.vis.right <- renderSurfaceFunction(list(wm.right, glass.right),
eigenvectors.right, surfval=0.5, alphasurf=c(1, 0.2),
basefval=1.5, alphafunc=1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_sagittal_right.png')
# now visualization for elastic net
img.glm.age <- antsImageClone(mask)
img.glm.age[mask > 0 ] <- betas.glm.age
img.glm.age.left <- maskImage(img.glm.age, leftright, 1)
img.glm.age.right <- maskImage(img.glm.age, leftright, 2)
vis.age.glm.left <- renderSurfaceFunction(list(wm.left, glass.left),
list(img.glm.age.left), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
par3d(userMatrix=lateralLeft, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_left.png')
par3d(userMatrix=sagittalLeft, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_left.png')
vis.age.glm.right <- renderSurfaceFunction(list(wm.right, glass.right),
list(img.glm.age.right), surfval=0.5, alphasurf=c(1, 0.2),
alphafunc=1, basefval=0.1)
par3d(userMatrix=lateralRight, windowRect=c(25,25,325,325), zoom=0.8 )
rgl.snapshot('fig/age_glm_lateral_right.png')
par3d(userMatrix=sagittalRight, windowRect=c(25,25,325,325), zoom=0.9)
rgl.snapshot('fig/age_glm_sagittal_right.png')
